# Tools for Working With Simulation

Business simulation is a type of computer-based modeling that allows us to experiment and analyze different business scenarios and strategies. Its appeal comes from being a cost-effective way to explore and test business decisions in production, marketing, finance, and operations, among many others.

We will be using R to conduct business simulation. However, before building our simulation models, we must learn the tools to perform the analysis. In this module, we introduce the building blocks of computer simulation models.

## Storing Our Data in R

Objects, vectors, and data frames are all critical in the R programming language. They are helpful when storing and manipulating data in R. An **object** is often stored in a variable. It can be as simple as a single integer or as informative as the output in regression analysis. The code below creates an object *x* that stores the number $5$.

```{r}
x<-5
```

**Vectors** are one-dimensional data arrays that can be stored in an object. They can contain elements of various data types, such as numerical values, character, or logical values (i.e., TRUE or FALSE). However, every component of the vector must be the same data type. Below, the vector *Books* stores the titles of $5$ monster classics a bookstore plans to release as characters.

```{r}
books<-c("Frankenstein","Dracula","Moby Dick",
         "War Of The Worlds","Beowulf")
```

Lastly, a **data frame**, is a two-dimensional data table with rows and columns. Each column in a data frame represents a different variable, and each row represents a single observation or record. Think of a data frame as a collection of related vectors. We can easily construct a data frame by combining one or more vectors using the `data.frame()` function in R.

```{r}
data.frame(Books=c("Frankenstein","Dracula",
                     "Moby Dick",
                     "War Of The Worlds","Beowulf"), 
           Price=c(9.5,5.78,6.34,5.67,2.45))
```

## Generating Random Numbers in R

Several functions are available in R can be used to **generate random numbers**. These functions are based on a specific probability distribution. For instance, the `rbinom()` function generates random numbers based on the binomial distribution, while the `rnorm()` function generates random numbers based on the normal distribution. Using these functions, we can generate random numbers following a specific probability distribution. For example, the **binomial distribution ** helps estimate the probability that a certain number of customers will respond to a marketing campaign. However, as we will see below, we can also use the distribution to generate random customers who either respond or do not respond to the campaign.

Assume the bookstore is uncertain of how many customers will buy their Monster Classic Series at the list price. They plan to send $100$ catalogs by mail to potential customers. Before they send the catalogs, they decide to get an estimate on demand. Past data reveals that a customer would likely buy any titles at the price of $0.70$. Modifying our data frame by simulating demand with the `rbinom()` function.

```{r}
(MS<-data.frame(Books=c("Frankenstein","Dracula",
                     "Moby Dick",
                     "War Of The Worlds","Beowulf"), 
           Price=c(9.5,5.78,6.34,5.67,2.45),
           Demand=rbinom(5,100,0.7)))
```

As you can see, the `rbinom()` function has yielded $5$ simulated outcomes from the binomial experiment with a probability of $0.7$. With these demands, the bookstore can prepare for different demand scenarios and assess the Monster Series's profitability. Below is a table summarizing some common distributions and their respective functions in R.

|  Distribution  |   Family   |  Package   |  Function   |
|:--------------:|:----------:|:----------:|:-----------:|
|    Uniform     |  Discrete  | extraDistr | `rdunif()`  |
|    Binomial    |  Discrete  |   Base R   | `rbinom()`  |
| Hypergeometric |  Discrete  |   Base R   | `rhyper()`  |
|    Poisson     |  Discrete  |   Base R   |  `rpois()`  |
|    Uniform     | Continuous |   Base R   |  `runif()`  |
|     Normal     | Continuous |   Base R   |  `rnorm()`  |
|  Exponential   | Continuous |   Base R   |  `rexp()`   |
|    Triangle    | Continuous | extraDistr | `rtriang()` |

## Using Loops in R

**Loops** and **conditionals** are extremely useful when creating our simulation models. Among the many benefits, they will allow us to quickly generate new variables for our model or test different variations of our parameters to see how the model behaves.

A **loop** is a programming construct that allows you to repeat a block of code a specified number of times or until a specific condition is met. There are several types of loops in R, including for loops, which execute a block of code for a fixed number of iterations, and while loops, which execute a block of code as long as a particular condition is true. Let us illustrate the syntax of the **for loop** by simulating demand for each book Monster Classics series and calculating the total revenue. 

```{r}
Revenue<-c()

for (i in MS$Price) {
  Revenue<-c(Revenue,i*rbinom(1,100,0.7))
  print(Revenue)
}
```

The code above starts by creating an empty vector to store the revenue generated by each book. A for loop is then used to simulate the revenue for each book. The process starts by taking the first price in the MS\$Price vector and multiplying it with a single random number drawn from the binomial distribution with $100$ trials and probability $0.7$ (our simulated demand). Note how the code combines the *Revenue* vector with the revenue generated by the simulation in the code `c(Revenue, i*rbinom(1,100,0.7)`. This process is repeated for every number in the MS\$Price vector, leading to a final vector with each book's revenues.

## Using Conditionals in R

**Conditionals** allow you to execute different code blocks based on whether a certain condition is true or false. The most common type of conditional in R is the if-else statement, which executes one block of code if a condition is true and a different block of code if the condition is false.

Let us go back to the Monster Classic example and assume that the bookstore has gained additional insight into the demand for their collection. In particular, assume that if the book is either Frankenstein or Dracula, the probability of a customer buying it is $0.9$ (the probability of the other books remains at $0.7$). We can now modify our demand simulation using a loop and a conditional.

```{r}
demand<-c()

for (i in MS$Books){
  if (i=="Frankenstein"| i=="Dracula"){
    p=0.9
  }
  else {p=0.7}
  demand<-c(demand,rbinom(1,100,p))
}

print(demand)
```

In the code above, the inner conditional checks whether the titles are either Frankenstein or Dracula. If so, the random binomial number is drawn with the probability $0.9$. If not, it is drawn with probability $0.7$. The for loop, goes through all the books in the series and adds a simulated demand. You can quickly realize that this becomes very efficient if the bookstore has an extensive collection of books. Below is our data frame with the new simulated values.


```{r}
(MS<-data.frame(Books=c("Frankenstein","Dracula",
                     "Moby Dick",
                     "War Of The Worlds","Beowulf"), 
           Price=c(9.5,5.78,6.34,5.67,2.45),
           Demand=demand))
```

## The VA Department of Transportation Wants Your Services

The VA ferry crossing the James River was first established in $1925$. The ferry transports vehicles back and forth from Jamestown to Scotland in a $15$-minute ride. The VA Department of Transportation wants you to simulate the daily demand for the ferry so that they schedule the expected staff and number of ferries to run.

Assume that the VA Department of transportation shares three weeks of data. The table below records the number of vehicles that used the ferry service:

| Day | Week 1 | Week 2 | Week 3 |
|:---:|:------:|:------:|:------:|
| Mon |  1175  |  1020  |  1163  |
| Tue |  1198  |  1048  |  1066  |
| Wed |  1189  |  1102  |  1183  |
| Thu |  1175  |  1094  |  1003  |
| Fri |  1101  |  1042  |  1095  |
| Sat |  1529  |  1464  |  1418  |
| Sun |  1580  |  1534  |  1512  |

What distribution would you use to simulate weekdays (Mon-Fri)? Would you simulate weekends (Sat and Sun) differently than weekdays? According to the data, what would be the minimum and maximum number of vehicles transported during weekdays (weekends)? Can you provide a sensible simulation for week 4?

## Readings

These reading will help you review the concepts and theory necessary for completing this module. @HOP reviews the R basics needed to perform computer simulation, @GelvesBS has several applied problems in R to review the probability concepts necessary to understand the different random number generators, while @PMS provides an application of the distributions to business simulation.

@HOP Chapter 1 (The Very Basics), Chapter 3 (R Objects), Chapter 7.2, 7.3 (Conditional Statements), Chapter 9.3, 9.4, 9.5 (Loops).

@GelvesBS Chapter 10 (Discrete Random Variables), Chapter 11 (Continuous Random Variables). This is mainly review from your probability course. It is recommended you attempt the exercises in both chapters (solutions are provided at the end).

@PMS Chapter 10.1 (Introduction) and 10.2 (Probability Distributions for Input Variables). Pay special attention to the probability distributions and try to replicate the examples in R.

@JK Chapter 5 (Discrete Probability Distributions) and Chapter 6 (Continuous Probability Distributions).

## Lessons Learned In This Chapter

-   Generate random numbers using R functions.

-   Use Loops and Conditionals to simulate variables.

-   Apply objects, vectors, and data frames to store and manipulate data.
